* 19 Reading and Printing Lisp Objects
从Lisp objects 到 textual form就是print

反之从textual form 到 Lisp objects就是read

**  read
read 这个函数可以接受以下类型
- buffer
#+begin_example
     ---------- Buffer: foo ----------
     This-!- is the contents of foo.
     ---------- Buffer: foo ----------

     (read (get-buffer "foo"))
          ⇒ is
     (read (get-buffer "foo"))
          ⇒ the

     ---------- Buffer: foo ----------
     This is the-!- contents of foo.
     ---------- Buffer: foo ----------
#+end_example
read 是会路过空格的。

- string
#+begin_example
     (read "(When in) the course")
          ⇒ (When in)
     (read "When in the course")
          ⇒ When

#+end_example
之所以会这样是因为read想要读一个lisp表达式。如果没读成才读一个word.
永远要记住所谓read,就是将一个text lisp读成一个lisp object.
事实上读到的when,也是lisp string object，然后打印出显示when的。


- marker
#+begin_example
     ---------- Buffer: foo ----------
     This is the contents of foo.
     ---------- Buffer: foo ----------

     (setq m (set-marker (make-marker) 1 (get-buffer "foo")))
          ⇒ #<marker at 1 in foo>
     (read m)
          ⇒ This
     m
          ⇒ #<marker at 5 in foo>   ;; Before the first space.
#+end_example
marker和point是没关系的。


- t
如果参数是t表示从minibuffer里读取lisp 表达式。
#+begin_example
 (read t)
          ⇒ 23
     ---------- Buffer: Minibuffer ----------
     Lisp expression: 23 <RET>
     ---------- Buffer: Minibuffer ----------
#+end_example

(read t) 和(read) 是一个效果，都是忽略参数。


- function
有点复杂现在看不懂。

** 19.2 input function
除了read函数，还有

Function: read-from-string string &optional start end


#+begin_example
      (read-from-string "(setq x 55) (setq y 5)")
               ⇒ ((setq x 55) . 11)
        返回是一个cell , car 是读的内容，cdr 是下一个要读的位置， 位置是0开始。


       (read-from-string "\"A short string\"")
               ⇒ ("A short string" . 16)

          ;; Read starting at the first character.
          (read-from-string "(list 112)" 0)
               ⇒ ((list 112) . 10)

               ;; Read starting at the second character.
          (read-from-string "(list 112)" 1)
               ⇒ (list . 5)
          ;; Read starting at the seventh character,
          ;;   and stopping at the ninth.
          (read-from-string "(list 112)" 6 8)
               ⇒ (11 . 8)
;; 这句是从6开始读，读到8,得到结果是11(就是112的那个11)
#+end_example

** 19.4 output
参数一般可以接受以下类型
- buffer
输入到point的位置。
#+begin_example
  ---------- Buffer: foo ----------
     This is t-!-he contents of foo.
     ---------- Buffer: foo ----------

     (print "This is the output" (get-buffer "foo"))
          ⇒ "This is the output"

     ---------- Buffer: foo ----------
     This is t
     "This is the output"
     -!-he contents of foo.
     ---------- Buffer: foo ----------

#+end_example
- marker
#+begin_example
  ---------- Buffer: foo ----------
     This is the -!-output
     ---------- Buffer: foo ----------

     (setq m (copy-marker 10))
          ⇒ #<marker at 10 in foo>

     (print "More output for foo." m)
          ⇒ "More output for foo."

     ---------- Buffer: foo ----------
     This is t
     "More output for foo."
     he -!-output
     ---------- Buffer: foo ----------

     m
          ⇒ #<marker at 34 in foo>
#+end_example
- t
echo area
#+begin_example
     (print "Echo Area output" t)
          ⇒ "Echo Area output"
     ---------- Echo Area ----------
     "Echo Area output"
     ---------- Echo Area ----------

#+end_example

- function
比如在调试时输出调试信息。
#+begin_example
 (print "This is the output" #'external-debugging-output)
          -| This is the output
          ⇒ "This is the output"
#+end_example

** 19.5 Output Functions


首先我们有时候会看到这样的问题
#+begin_example
     (setq foo (list nil))
          ⇒ (nil)
     (setcar foo foo)
          ⇒ (#0)
#+end_example

这是因为自己引用自己造成，这如果要打印会死循环，所以emacs检测这种问题，并打印#level

那么有哪些输出函数呢？

Function: print object &optional stream

Function: prin1 object &optional stream
这是数字1. 不打印回车

Function: princ object &optional stream
这个函数接受object

Function: terpri &optional stream ensure
输出一个new line  , 全名为terminite print

* 20 Minibuffers
在学read from minibuffer,前先看command, 大多数问题通过command就可以解决。

minibuffer可以让你获取比 the single numeric prefix argument更复杂的用户输入。
那些参数虽然可以包含buffer 名、file、command名,



minibuffer和echo area 在一个地方，只不过它是用来读取输入的。

** 20.1 minibuffer
也是buffer,只不过以‘ *Minibuf-number*’命名，因为名字前边有s空格，所以在buffer-menu中看不到，是隐藏的。

** 20.2 使用mini-buffer读取text string
一般来说，你不应该在函数体里使用minibuffer input funtion. 而应该在(interactive) special form里完成对参数的获取。
详见21 Command那一章。


*** read-from-minibuffer

Function: read-from-minibuffer prompt &optional initial keymap read history default inherit-input-method

initial: 这个参数废掉了。给nil就行。

keymap: 是在mini buffer内有效果的key map ,也没什么

read: 如果read这个参数是t 它就是读取lisp对象，否则是读取text文本。

history: 这个参数是要给一个符号或者nil,默认是minibuffer-history，用于记录用户输入的历史。
deault: 这个参数可以是a string, a list of strings, or nil. 它可以让这strings变量history 列表，通过M-n切换。
#+begin_src elisp
(read-from-minibuffer "Foo:" nil nil nil nil '("a" "b"))
#+end_src
你执行上面的函数，通过M-n就可以切换到a 和 b;


*** read-string
— Function: read-string prompt &optional initial history default inherit-input-method

只读string, 不读lisp object.

没有keymap参数，它使用的keymap是minibuffer-local-map。

*** read-regexp
read-regexp prompt &optional defaults history

*** read-minibuffer prompt &optional initial
这是只读lisp object的。


** 20.6 Completion
 <TAB> (minibuffer-complete)

try-completion 是底层函数。

completing-read 是高级用户接口。

*** 20.6.1 基本basic completing 函数
这些函数与minibuffer无关，是那些高级函数的基础。

**** Function: try-completion string collection &optional predicate

collection ：叫completion table,它可以是 list of strings or cons cells, an obarray, a hash table, or a completion function.

try-completion函数，将string参数与collection里面每一个string对比。 如果没有匹配返回nil. 如果发现有一个完全的匹配，就返回t.
否则，返回一个string，collection中所有以string开头的内容相同的最长部分.
#+begin_src elisp
  (try-completion
           "foo"
           '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4)))
               ⇒ "fooba"

 (try-completion "foo" '(("barfoo" 2) ("foo" 3)))
               ⇒ t
#+end_src

第一个， foo 没有完全匹配的， 列表中，有以foo 开头，有foobar1 foobaz foobar2 他们最大的相同的部分是fooba.

第二个，有相同的匹配直接返回t.

predicate: 这个函数如果不是nil就得是一个接入一个string函数。
#+begin_src elisp
  (defun test (s)
            (> (length (car s)) 6))
               ⇒ test
  (try-completion
           "foo"
           '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
           'test)
               ⇒ "foobar"
#+end_src
返回长度大于6的匹配结果。

**** all-completions
 Function: all-completions string collection &optional predicate

返回的是一个list,是所有匹配的结果。

*** 20.6.2 Completion and the Minibuffer

**** completing-read
Function: completing-read prompt collection &optional predicate require-match initial history default inherit-input-method

前面学完了，这些参数虽然多，但大部分看着没有压力了。

require-match： 这个参数是帮助你实现交互的 它可以有以下值
- nil 随意走
- t 你必须输入给你的collection里的某个string，才能走
- confirm 没输入给你的选择也能放你走，但是请您点确认，后果自负

initial: 可以提供一个string作为用户输入的开头。

#+begin_src elisp
          (completing-read
           "Complete a foo: "
           '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
           nil t "fo")
#+end_src


* 21 command
** 21.2 Defining Commands

#+begin_src elisp
(defun myfunction ()
  "Execute a mvn exec:java goal for current file buffer."
  (interactive "")

  )

#+end_src

上面是命令定义的一个模板。

interactive是一个special form 。

Special Form: interactive arg-descriptor

arg-descriptor 有以下可能的值：
- 忽略或者是nil
- string: 由newlines（\n）分隔的元素。 一个元素a代表一个参数。一个元素有一个character code 和一个可选的promt组成。
举个例子
#+begin_src elisp
 (interactive "P\nbFrobnicate buffer: ")
#+end_src
\n有一个，所有有两个元素，第一个，只有一个P,表示Prefix Command Arguments。第二个元素 bFrobnicate buffer: b表示buffer
- lisp 表达式： 它是一个list,每个元素代表一个参数，通常是通过各种输入函数，比如read-from-minibuffer来获取用户输入。
#+begin_src elisp
(defun my-test-fun ()
  (interactive
   (list
    (read-string "Foo: " nil )))
  )

#+end_src



** Prefix Command Argument
定义一个函数测试Prefix
#+begin_src elisp
 (defun display-prefix (arg)
       "Display the value of the raw prefix arg."
       (interactive "P")
       (message "%s" arg))
#+end_src
#+begin_example
  M-x display-prefix  -| nil

     C-u     M-x display-prefix  -| (4)

     C-u C-u M-x display-prefix  -| (16)

     C-u 3   M-x display-prefix  -| 3

     M-3     M-x display-prefix  -| 3      ; (Same as C-u 3.)

     C-u -   M-x display-prefix  -| -

     M--     M-x display-prefix  -| -      ; (Same as C-u -.)

     C-u - 7 M-x display-prefix  -| -7

     M-- 7   M-x display-prefix  -| -7     ; (Same as C-u -7.)

#+end_example
